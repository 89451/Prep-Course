Prototipos
Los prototipos son un mecanismo mediante el cual los objetos en JavaScript heredan características entre sí.
JavaScript es a menudo descrito como un lenguaje basado en prototipos para proporcionar mecanismos de herencia, los objetos pueden tener un objeto prototipo, el cual actúa como un objeto plantilla que hereda métodos y propiedades.
Un objeto prototipo del objeto puede tener a su vez otro objeto prototipo, el cual hereda métodos y propiedades, y así sucesivamente. Esto es conocido con frecuencia con la cadena de prototipos, y explica por qué objetos diferentes pueden tener disponibles propiedades y métodos definidos en otros objetos.
Bien, para ser exactos, los métodos y propiedades son definidos en la propiedad prototype, que reside en la función constructora del objeto, no en la instancia misma del objeto.
En JavaScript, se establece un enlace entre la instancia del objeto y su prototipo (su propiedad __proto__, la cual es derivada de la propiedad prototype sobre el constructor), y las propiedades y métodos son encontrados recorriendo la cadena de prototipos.
Nota: es importante entender que, tanto el prototipo de la instancia de un objeto (al cual se accede mediante Object.getPrototypeOf(obj), o a través de la propiedad __proto__) como el prototipo que contine el constructor (que se encuentra en la propiedad prototype del constructor) hacen referencia al mismo objeto.
Importante: La propiedad prototype es una de las partes más confusamente nombradas de JavaScript – podría pensarse que this apunta al objeto prototipo del objeto actual, pero no lo hace (es un objeto interno al que puede accederse mediante __proto__), en su lugar, prototype es una propiedad que contine un objeto en el que se definen los miembros que se desea que se hereden.

Constructores
JavaScript, utiliza funciones especiales llamadas funciones constructoras para definir objetos y sus características. Son útiles porque a menudo nos encontraremos con situaciones en las que no sabes cuántos objetos crearemos; los constructores proporcionaran los medios para crear tantos objetos como necesitemos de una manera efectiva, adjuntando datos y funciones a ellos según sea necesario.
Cuando se crea una nueva instancia del objeto a partir de una función constructoras, su funcionalidad central no se copia en el nuevo objeto como lenguajes orientados a objetos “clásicos”, sino que la funcionalidad está vinculada a través de una cadena de referencia llamada cadena de prototipo. Así que esto no es una verdadera instanciación, estrictamente hablado, JavaScript usa un mecanismo diferente para compartir funcionalidad entre objetos.
Exploremos la creación de clases a través de constructores y la creación de instancias de objetos a partir de ellas en JavaScript.
Un ejemplo simple
1.	Comencemos por ver cómo puedes definir una persona con una función normal. Agrega esta función.

function createPerson(name) {
   var obj = {};
   obj name = name;
   obj.greeting = function() {
      alert (‘Hi I\’m + this.name + ‘.’);
   };
   return obj;
}

2.	Ahora puedes crear una nueva persona llamando a esta función

var salva = createNewPerson (‘Salva’);
salva.name;
salva.greeting();

Esto funciona bastante bien, pero es un poco largo; si sabemos que queremos crear un objeto, ¿por qué necesitamos crear explícitamente un nuevo objeto vacío y devolverlo?
Afortunadamente, JavaScript nos proporciona un práctico acceso directo, en forma de funciones constructoras.

3.	Reemplaza tu función anterior por la siguiente: 

function Persona(name) {
   this.name = name;
   this.greeting = function() {
      alert (‘Hi I\’m + this.name + ‘.’);
   };
}

La función constructora es la versión de JavaScript de una clase. Notaremos que tiene todas las características que esperamos en una función, aunque no devuelve nada o crea explícitamente un objeto – básicamente sólo define propiedades y métodos. Veremos que las palabras clave this se está usando aquí también es básicamente decir que cuando se crea una de estas instancias de objeto, la propiedad name del objeto será igual al valor del nombre pasado a la llamada del constructor, y el método greeting () usará también el valor del nombre pasado a la llamada del constructor.
Entonces, ¿cómo llamamos a un constructor para crear algunos objetos?

1.	Agregaremos las siguientes líneas debajo de nuestro código anterior:

var person1 = new Person(‘Bob’);
var person2 = new Person(‘Sarah’);


2.	Guardemos el código y volvamos a cargarlo en el navegador, e intentemos ingresar las siguientes líneas en la consola JavaScript:

person1.name
person1.greeting()
person2.name
person2.greeting()

Ahora veremos que tenemos dos nuevos objetos, cada uno de los cuales está almacenado en un espacio de nombres diferentes: para acceder a sus propiedades y métodos, debes llamarlos como person1 o person2; están cuidadosamente empaquetados para que no entren en conflicto con otras funciones. Sin embargo, tiene disponible la misma propiedad name y el método greeting(). Ten en cuenta que están utilizando su propio name que les asignó cuando se crearon, esta es una razón por la cual es muy importante usar this, para que usen sus propios valores, y no algún otro valor.

Veamos nuevamente las llamadas del constructor:
   var person1 = new Person(‘Bob’);
   var person2 = new Person(‘Sarah’);

En cada caso, la palabra clave new se usa para indicarle al navegador que queremos crear una nueva instancia del objeto, seguida del nombre de la función con sus parámetros requeridos entre paréntesis, y el resultado se almacena en una variable -muy similar como se llama a una función estándar. Cada instancia se crea de acuerdo con esta definición:

   function Person(name) {
      this.name = name;
      this.greeting = function () {
      alert(‘Hi! I\’m ’ this.name + ‘.’);
      };
}

Una vez creado los nuevos objetos, las variables person1 y person2 contienen los siguientes objetos:

   {
      name: ‘Bob’, 
      greeting: function () {
         alert(Hi! I\’m ‘ + this.name + ‘.’);
      }
   }
   {
      name: ‘Sarah’,
      greeting: function() {
         alert (‘Hi! I\’m ‘ + this.name + ‘.’);
      }
   }

Debemos tener en cuenta que cuando llamamos a nuestra función constructora, estamos definiendo geeting() cada vez, lo cual no es lo ideal. Para evitar esto, podemos definir funciones en el prototipo.
Ahora crearemos nuestra función constructor Person() final.
1.	Eliminar el código que insertamos hasta ahora y agregar este constructor de reemplazo; este es exactamente el mismo que el ejemplo simple del principio, con un poco más de complejidad:


function Person(first, last, age, gender, insterests) {
   this.name = {
      ‘first’: first,
      ‘last’: last
   };
   this.age = age;
   this.gender = gender;
   this.interests = interests;
   this.bio = function() {
      alert(this.name.first + ‘  ‘ + this.name.last + ‘is ’ + this.age + ‘years old. He likes ‘ + 
      this.interests[0] + ‘ and ‘ + this.interests[1] + ‘.’);
   };
   this.greeting = function() {
      alert(‘Hi! I\’m + this.name.first + ‘.’);
   };
}

2.	Ahora, agregaremos la siguiente línea para crear una instancia del objeto:

var person1 = new Person(‘Bob’, ‘Smith’, 32, ‘male’, [‘music’, skiing’]);

Ahora veremos que podemos acceder a las propiedades y métodos justos como lo hicimos anteriormente.
Person1[‘age’]
Person1.interests[1]
person1.bio()
// etc.

Hasta ahora hemos creado dos formas diferentes de crear una instancia de objetos -declarando un objeto literal, y usando una función constructora.
Esto tiene sentido, pero hay otras formas. 

El constructor Object()
Antes que nada podemos utilizar el constructor Object() para crear un nuevo objeto. Si incluso objetos genéricos tienen un constructor que genera un objeto vacío.
1.	Ingresaremos este código en la consola JavaScript de nuestro navegador.

var person1 = new object();

2.	Esto guarda un objeto vacío en la vacante person1. Luego podemos agregar propiedades y métodos a este objeto usando la notación de punto (.) o de corchetes ([“]); prueba estos ejemplos en tu consola:

person1.name = ‘Chris’;
person1[‘age’] = 38;
person1.greeting  = function() {
   alert(‘Hi! I\’m  ‘ + this.name + ‘.’);
};

3.	También puede pasar un objeto literal como parámetro al constructor Object(), para precargarlo con propiedades/métodos.

var persona = new Object({
   name: ‘Chris’,
   age: 38,
   greeting: function() {
      alert(‘Hi! I\’m ‘ + this.name + ‘.’);
   }
});

Usando el método create()
Los constructores nos pueden ayudar a ordenar nuestro código, podemos crear constructores en un lugar, y luego crear instancias cuando sea necesario.
Sin embargo, algunas personas prefieren crear instancias de objetos sin crear antes constructores, especialmente si van a crear solamente poscas instancias de un objeto.
JavaScript tiene un método llamado create() que permite hacer esto. Con este método podemos crear un nuevo objeto basado en cualquier otro objeto existente.

1.	Con nuestro ejercicio anterior cargado en el navegador.
var person2 = Obejct.create(person1);

2.	Y a continuación probaremos lo siguiente:
person2.name
person2.greeting()

Veremos que person2 fue creado basado en person1 y tiene las mismas propiedades y métodos.
Una limitación del método create() es que no está soportado por el navegador IE8. Por lo que los constructores serán más efectivos si necesitamos soportar navegadores más antiguos.
